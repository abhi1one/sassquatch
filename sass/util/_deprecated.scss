/**
 * MIXINS
 * Sass mixins (including compass mixin shims)
 * 
 * TODO: organize these into concern-specific individual files in ./mixins/
 */

@mixin opacity($opacity, $supportSimpleIE: true) {
	opacity: $opacity;
	@if $supportSimpleIE {
		-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})";
	}
}


// #############################################################################################
// CRUSTYBASE MIXINS - DEPRECATED
// #############################################################################################
// BUTTON COLOR
// Can be used for all clickable 3d affordance elements
@mixin button_color($base_color, $isLight: false){
	@include button_color_base($base_color, $isLight);

	&:hover {
		@include button_color_hover($base_color, $isLight);
	}

	&:active, &.selected, &.active {
		@include button_color_active($base_color, $isLight);
	}
}

// alias deprecated buttonColor to button_color
@mixin buttonColor($base_color, $isLight: false){
	@include button_color($base_color, $isLight);
}


// BUTTON COLOR COMPONENTS
// 90% of the time, you probably don't want to use these directly -- try button_color
@mixin button_color_base($base_color, $isLight: false){
	@include box-shadow( rgba(255,255,255,.2), 1px, 1px, 0, 0, true);
	border: 1px solid rgba(0,0,0,.15);
	@include gradient($base_color, darken($base_color, if($isLight, 5%, 10%)));
}
@mixin button_color_hover($base_color, $isLight: false){
	@include gradient(lighten($base_color, 5%), darken($base_color, if($isLight, 7%, 10%)));
}
@mixin button_color_active($base_color, $isLight: false){
	background: darken($base_color, if($isLight, 10%, 15%));
	@include punched_in_box_shadow;
}

@mixin button_primary_color($base_color){
	$darker: darken($base_color, 10%);
	$lighter_base_color: lighten($base_color, 5%);

	@include gradient($base_color, darken($base_color, 10%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 20%);
	&:hover {
			@include gradient($lighter_base_color, $darker);
	}
	&:active {
			background: $darker;
			@include box-shadow(mix(#000000, $base_color, 40%), 1px, 1px, 0, 0, true);
	}
}

@mixin button_secondary_color($base_color){
	@include gradient($base_color, darken($base_color, 7.5%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 10%);
	&:hover {
			$lighter_base_color: lighten($base_color, 5%);
			$darker: darken($base_color, 10%);
			@include gradient($lighter_base_color, $darker);
	}
	&:active {
			background: darken($base_color, 10%);
			@include box-shadow(mix(#000000, $base_color, 40%), 1px, 1px, 0, 0, true);
	}
}

@mixin button_disabled_color($base_color){
	@include gradient($base_color, darken($base_color, 10%));
	@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
	border: 1px solid darken($base_color, 20%);
	&:hover {
			@include gradient($base_color, darken($base_color, 10%));
			@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
			border: 1px solid darken($base_color, 20%);
	}
	&:active {
			@include gradient($base_color, darken($base_color, 10%));
			@include box-shadow(mix(#ffffff, $base_color, 30%), 1px, 1px, 0, 0, true);
			border: 1px solid darken($base_color, 20%);
	}
}

/* TODO: check usage */
@mixin buttonize($base_color){
	display: inline;
	display: inline-block;
	$darker: $base_color - #444;
	@include gradient($base_color, $darker);
	border: 2px solid $darker;
	text-decoration: none;
	text-align: center;
	cursor: pointer;
	zoom: 1;
	font-weight: $W_bold;
	font-family: arial, sans-serif;
	*cursor: hand;

	&:hover {
		$lighter_base_color: $base_color + #0a0a0a;
		$darker: $lighter_base_color - #444;
		@include gradient($lighter_base_color, $darker);
		border: 2px solid $darker;
		text-decoration: none; }

	&:active {
		background: $darker; }
}

@mixin facebookButton($paddingTop, $paddingBottom) {
	color: #fff !important;
	$base_color: $C_facebook;

	@include button_primary_color($C_facebook);
	border-radius: $defaultRadius;

	position: relative;
	padding-top: $paddingTop;
	padding-bottom: $paddingBottom;

	&:before {
		content: '\00a0';
		background: url('/img/f-logo.png') center center no-repeat;
		position: absolute;
		display: block;
		border-right: 1px solid mix(#ffffff, $base_color, 30%);
		@include box-shadow( darken($base_color, 10%), -1px, 0, 0, 0, true);
		left: 0px;
		top: 0px;
		text-align: center;
		padding-top: $paddingTop;
		padding-bottom: $paddingBottom;
		padding-left: 18px;
		padding-right: 18px;
		font-size: 16px !important;
	}
}



/*  DEVICE @MEDIA MIXINS
 *
 *  phone()
 *  tablet()
 *  portrait()
 *  landscape()
 *
 *  Tablet and phone layouts have very different requirements and
 *  ergonomic factors--and putting styles that work well on a phone
 *  onto a tablet makes everything look stretched like silly putty.
 *  (Vice-versa, and it looks equally shoddy.)
 *
 *  To avoid having to remember breakpoints and all that fun stuff,
 *  these mixins, `@tablet` and `@phone`.
 *
 *  These won't be the most accurate names, but they're pretty useful.
 *
 *  Again, these breakpoints are using CSS Pixels, which are the
 *  measurement unit, not the hardware subelement.
 *
 *  And unfortunately, based on the way SASS works, I don't think we
 *  can encapsulate the looping process within each of these mixins.
 */

/* TODO these phone() and tablet() mixins are totally ill advised,
 * and we shouldn't use them (and I added them!) -j
 *
 * Kill on cleanup.
 */
@mixin phone($selector, $prop_list) {
	 @media screen and (max-device-width: $phone_tablet_breakpoint) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {

				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;

					 #{$a}: #{$b};
				}
		  }
	 }
}
@mixin tablet($selector, $prop_list) {
	 @media screen and (min-device-width: $phone_tablet_breakpoint + 1) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {
				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;

					 #{$a}: #{$b};
				}
		  }
	 }
}
@mixin landscape($selector, $prop_list) {
	 @media screen and (orientation:landscape) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {

				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;

					 #{$a}: #{$b};
				}
		  }
	 }
}
@mixin portrait($selector, $prop_list) {
	 @media screen and (orientation:portrait) {
		  $i:   1;
		  $max: length($prop_list) + 1;

		  #{$selector} {
				@while ($i < $max) {
					 $a: nth($prop_list, $i);
					 $b: nth($prop_list, $i+1);

					 $i: $i + 2;

					 #{$a}: #{$b};
				}
		  }
	 }
}





