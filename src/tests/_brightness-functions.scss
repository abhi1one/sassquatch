/**
* TEST
* brightness functions
*/

$red: $C_red;
$black: #000;
$gray: #ddd;
$blue: $C_blue;
$lightblue: #13a1ff;
$green: $C_green;

%output {
	position: absolute;
	bottom: -24px;
	left: 1px;
	font-size: 11px;
	color: #333 !important;
	font-family: monaco, consolas, monospace;
}

@mixin showValue( $color ) {
	position: relative;
	&:after {
		@extend %output;
		content: "#{getPerceivedBrightness( $color )}"
	}
}

@mixin isDark( $color ) {
	position: relative;
	&:after {
		@extend %output;
		content: "#{isDark( $color )}"
	}
}

.testSwatches {
	margin-top: 16px;
	li {
		width: 188px;
		height: 32px;
		margin-right: 20px;
		margin-bottom: 48px;
		padding: 12px;
		text-align: center;
		font-size: 20px;
		font-weight: bold;
	}
}

/* Output basic brightness values */
#valRed {
	@include showValue( $C_red );
	background: $C_red;
}
#valBlack {
	@include showValue( $black );
	background: $black;
}
#valGray {
	@include showValue( $gray );
	background: $gray;
}
#valBlue {
	@include showValue( $blue );
	background: $blue;
}
#valLightblue {
	@include showValue( $lightblue );
	background: $lightblue;
}
#valGreen {
	@include showValue( $green );
	background: $green;
}

/* is dark? */
#darkRed {
	@include isDark( $C_red );
	background: $C_red;
}
#darkBlack {
	@include isDark( $black );
	background: $black;
}
#darkGray {
	@include isDark( $gray );
	background: $gray;
}
#darkBlue {
	@include isDark( $blue );
	background: $blue;
}
#darkLightblue {
	@include isDark( $lightblue );
	background: $lightblue;
}
#darkGreen {
	@include isDark( $green );
	background: $green;
}

/* set contrast text */
#textRed {
	background: $C_red;
	color: getContrastTextColor( $C_red );
}
#textBlack {
	background: $black;
	color: getContrastTextColor( $black );
}
#textGray {
	background: $gray;
	color: getContrastTextColor( $gray );
}
#textBlue {
	background: $blue;
	color: getContrastTextColor( $blue );
}
#textLightblue {
	background: $lightblue;
	color: getContrastTextColor( $lightblue );
}
#textGreen {
	background: $green;
	color: getContrastTextColor( $green );
}

/* set offset text */
#offRed {
	background: $C_red;
	color: getContrastingOffset( $C_red );
}
#offBlack {
	background: $black;
	color: getContrastingOffset( $black );
}
#offGray {
	background: $gray;
	color: getContrastingOffset( $gray );
}
#offBlue {
	background: $blue;
	color: getContrastingOffset( $blue );
}
#offLightblue {
	background: $lightblue;
	color: getContrastingOffset( $lightblue );
}
#offGreen {
	background: $green;
	color: getContrastingOffset( $green );
}
